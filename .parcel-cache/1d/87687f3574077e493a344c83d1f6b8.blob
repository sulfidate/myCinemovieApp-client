var helpers = require("../../../../../../../.nvm/versions/node/v14.17.1/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MainView", ()=>MainView
); //   render() {
 //     const { movies, user } = this.state;
 //     return (
 //       <Router>
 //         <header>
 //           <Container>
 //             <Navbar expand="lg" variant="light" bg="light">
 //               <Navbar.Brand href="#home">my Cinemovie database</Navbar.Brand>
 //               <Navbar.Toggle />
 //               <Navbar.Collapse className="justify-content-end">
 //                 <NavDropdown title={user + "`s account"} id="basic-nav-dropdown">
 //                   <NavDropdown.Item href="#add-favorites">add favorites</NavDropdown.Item>
 //                   <NavDropdown.Item href="#edit-account">edit account</NavDropdown.Item>
 //                   <NavDropdown.Divider />
 //                   <NavDropdown.Item href="#logout-user">
 //                     <Button variant="info" size="sm" block onClick={() => { this.onLoggedOut() }}>Logout user</Button>
 //                   </NavDropdown.Item>
 //                 </NavDropdown>
 //               </Navbar.Collapse>
 //             </Navbar>
 //           </Container>
 //         </header>
 //         <Row className="main-view justify-content-md-center">
 //           <Route exact path="/" render={() => {
 //             if (!user) return <Col>
 //               <LoginView onLoggedIn={user => this.onLoggedIn(user)} />
 //             </Col>
 //             if (movies.length === 0) return <div className="main-view" />;
 //             return movies.map(m => (
 //               <Col md={3} key={m._id}>
 //                 <MovieCard movie={m} />
 //               </Col>
 //             ))
 //           }} />
 //           <Route path="/register" render={() => {
 //             if (user) return <Redirect to="/" />
 //             return <Col>
 //               <RegistrationView />
 //             </Col>
 //           }} />
 //           <Route path="/movies/:movieId" render={({ match, history }) => {
 //             if (!user) return <Col>
 //               <LoginView onLoggedIn={user => this.onLoggedIn(user)} />
 //             </Col>
 //             if (movies.length === 0) return <div className="main-view" />;
 //             return <Col md={8}>
 //               <MovieView movie={movies.find(m => m._id === match.params.movieId)} onBackClick={() => history.goBack()} />
 //             </Col>
 //           }} />
 //           <Route path="/directors/:name" render={({ match, history }) => {
 //             if (!user) return <Col>
 //               <LoginView onLoggedIn={user => this.onLoggedIn(user)} />
 //             </Col>
 //             if (movies.length === 0) return <div className="main-view" />;
 //             return <Col md={8}>
 //               <DirectorView director={movies.find(m => m.Director.Name === match.params.name).Director} onBackClick={() => history.goBack()} />
 //             </Col>
 //           }
 //           } />
 //           <Route path="/genres/:name" render={({ match, history }) => {
 //             if (!user) return <Col>
 //               <LoginView onLoggedIn={user => this.onLoggedIn(user)} />
 //             </Col>
 //             if (movies.length === 0) return <div className="main-view" />;
 //             return <Col md={8}>
 //               <GenreView genre={movies.find(m => m.Genre.Name === match.params.name).Genre} onBackClick={() => history.goBack()} />
 //             </Col>
 //           }
 //           } />
 //         </Row>
 //       </Router>
 //     );
 //   }
 // }
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _reactRouterDom = require("react-router-dom");
var _loginView = require("../login-view/login-view");
var _profileView = require("../profile-view/profile-view");
var _movieCard = require("../movie-card/movie-card");
var _movieView = require("../movie-view/movie-view");
// import { DirectorView } from '../director-view/director-view';
// import { GenreView } from '../genre-view/genre-view';
var _registrationView = require("../registration-view/registration-view");
var _reactBootstrap = require("react-bootstrap");
var _mainViewScss = require("./main-view.scss");
class MainView extends _reactDefault.default.Component {
    constructor(){
        super();
        // Initial state is set to null
        this.state = {
            movies: [],
            token: null,
            isLoaded: false,
            isLoaded2: false,
            selectedMovie: null,
            user: null,
            userData: null
        };
    }
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        let userToken = localStorage.getItem('user');
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user'),
                token: localStorage.getItem('token')
            });
            this.getUser(accessToken, userToken);
            this.getMovies(accessToken);
        }
    }
    newUser(newData) {
        localStorage.setItem('user', newData.Username);
        this.setState({
            userData: newData,
            user: newData.Username
        });
    }
    setSelectedMovie(newSelectedMovie) {
        this.setState({
            selectedMovie: newSelectedMovie
        });
    }
    getUser(token, user) {
        _axiosDefault.default.get(`https://mycinemoviedatabase.herokuapp.com/users/${user}`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            console.log('Success with getUser');
            this.setState({
                userData: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getMovies(token) {
        _axiosDefault.default.get(`https://mycinemoviedatabase.herokuapp.com/movies`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // Assign the result to the state
            this.setState({
                movies: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    /* When a user successfully logs in, this function updates the `user` property in state to that *particular user*/ onLoggedIn(authData) {
        console.log(authData);
        this.setState({
            user: authData.user.Username,
            token: authData.token
        });
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        this.getUser(authData.token, authData.user.Username);
        this.getMovies(authData.token);
    }
    onLoggedOut(signState) {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        this.setState({
            user: signState,
            token: null,
            userData: null
        });
    }
    loading() {
        setTimeout(()=>{
            this.setState({
                isLoaded: true
            });
        }, 1400);
    }
    loading2() {
        setTimeout(()=>{
            this.setState({
                isLoaded2: true
            });
        }, 3000);
    }
    render() {
        //Object destruction - same as const movies = this.state.movies;
        const { movies , user , isLoaded , isLoaded2 , token , userData  } = this.state;
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 138
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, {
            className: "main-view justify-content-center",
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 139
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            exact: true,
            path: [
                "/",
                "/movies"
            ],
            render: ({ history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 12
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    loggingIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0 || !isLoaded) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "loading"
                }, "Loading", /*#__PURE__*/ _reactDefault.default.createElement("span", {
                    className: "spinner"
                })), this.loading()));
                if (userData) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), movies.map((movie)=>/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                        xs: 12,
                        sm: 6,
                        md: 4,
                        lg: 4,
                        key: movie._id
                    }, /*#__PURE__*/ _reactDefault.default.createElement(_movieCard.MovieCard, {
                        movieData: movie,
                        userData: userData,
                        user: user,
                        token: token,
                        onGetAcc: ()=>{
                            this.getAcc(token, user);
                        },
                        onSignOut: (sgnState)=>{
                            this.signOut(signState);
                        }
                    }))
                )));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 140
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/register",
            render: ()=>{
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, null, /*#__PURE__*/ _reactDefault.default.createElement(_registrationView.RegistrationView, null)));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 167
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/movies/:movieId",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_movieView.MovieView, {
                    movieData: movies.find((m)=>m._id === match.params.movieId
                    ),
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }))));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 173
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/directors/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(DirectorView, {
                    directorData: movies.find((m)=>m.Director.Name === match.params.name
                    ).Director,
                    onBackClick: ()=>history.goBack()
                    ,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }))));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 187
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/genre/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(GenreView, {
                    genreData: movies.find((m)=>m.Genre.Name === match.params.name
                    ).Genre,
                    onBackClick: ()=>history.goBack()
                    ,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }))));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 201
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: `/users/${user}`,
            render: ({ history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (!userData && !isLoaded2) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), /*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "loading"
                }, "Loading", /*#__PURE__*/ _reactDefault.default.createElement("span", {
                    className: "spinner"
                })), this.loading2()));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/ _reactDefault.default.createElement(Navigation, {
                    user: user,
                    history: history,
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_profileView.ProfileView, {
                    user: user,
                    token: token,
                    history: history,
                    userData: userData,
                    onNewUser: (newData)=>{
                        this.newUser(newData);
                    },
                    onSignOut: (signState)=>{
                        this.signOut(signState);
                    }
                }))));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 215
            },
            __self: this
        }))));
    }
}

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}