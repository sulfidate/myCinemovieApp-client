var helpers = require("../../../../../../../.nvm/versions/node/v14.17.1/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//#2 export keyword removed from here
parcelHelpers.export(exports, "MainView", ()=>MainView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _reactRedux = require("react-redux");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactRouterDom = require("react-router-dom");
// #0
var _actions = require("../../actions/actions");
var _moviesList = require("../movies-list/movies-list");
var _moviesListDefault = parcelHelpers.interopDefault(_moviesList);
// #1
var _loginView = require("../login-view/login-view");
// MovieCard delete...
// import { MovieCard } from '../movie-card/movie-card';
//    -> will be imported and used in MoviesList */
var _movieView = require("../movie-view/movie-view");
var _directorView = require("../director-view/director-view");
var _genreView = require("../genre-view/genre-view");
var _registrationView = require("../registration-view/registration-view");
var _headerView = require("../header-view/header-view");
var _profileView = require("../profile-view/profile-view");
var _reactBootstrap = require("react-bootstrap");
var _mainViewScss = require("./main-view.scss");
class MainView extends _reactDefault.default.Component {
    constructor(){
        super();
        // #3 user, movies, genres, directors, FavoriteMovies state removed from here
        this.state = {
        };
    }
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user')
            });
            this.getUser(accessToken);
            this.getMovies(accessToken);
            this.getGenres(accessToken);
            this.getDirectors(accessToken);
        }
    }
    getUser(token) {
        const username = localStorage.getItem('user');
        _axiosDefault.default.get(`https://mycinemoviedatabase.herokuapp.com/users/${username}`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // #4 
            this.props.setUser(response.data);
        // this.setState({
        //   Username: response.data.Username,
        //   Password: response.data.Password,
        //   Email: response.data.Email,
        //   Birthday: response.data.Birthday,
        //   FavoriteMovies: response.data.FavoriteMovies,
        // });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getMovies(token) {
        _axiosDefault.default.get('https://mycinemoviedatabase.herokuapp.com/movies', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // #4 
            this.props.setMovies(response.data);
        // Assign the result to the state
        // this.setState({
        //   movies: response.data
        // });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getGenres(token) {
        _axiosDefault.default.get('https://mycinemoviedatabase.herokuapp.com/genres', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            this.setState({
                genres: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getDirectors(token) {
        _axiosDefault.default.get('https://mycinemoviedatabase.herokuapp.com/directors', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            this.setState({
                directors: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    /* When a user successfully logs in, this function updates the `user` property in state to that *particular user*/ onLoggedIn(authData) {
        this.setState({
            user: authData.user.Username
        });
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        localStorage.setItem('signedIn', true);
        this.getMovies(authData.token);
        this.getGenres(authData.token);
        this.getDirectors(authData.token);
    }
    onLoggedOut() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        this.setState({
            user: null
        });
    }
    render() {
        let { // user,
        // movies,
        // signedIn,
        FavoriteMovies ,  } = this.state;
        // #5 user, movies are extracted from this.props rather than from the this.state
        let { user , movies  } = this.props;
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 173
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, {
            className: "main-view justify-content-md-center",
            style: {
                marginTop: '150px',
                padding: '15px'
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 174
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_headerView.HeaderView, {
            user: user,
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 176
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            exact: true,
            path: "/",
            render: ()=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                // #6
                return(/*#__PURE__*/ _reactDefault.default.createElement(_moviesListDefault.default, {
                    movies: movies,
                    user: user
                }));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 178
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/register",
            render: ()=>{
                if (user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Redirect, {
                    to: "/"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_registrationView.RegistrationView, {
                    user: user
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 196
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/profile",
            render: (history)=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 7
                }, /*#__PURE__*/ _reactDefault.default.createElement(_headerView.HeaderView, {
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, null, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Button, {
                    variant: "info",
                    style: {
                        color: 'white'
                    },
                    className: "profile-title",
                    disabled: true
                }, "User Profile")), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, null, /*#__PURE__*/ _reactDefault.default.createElement(_profileView.ProfileView, {
                    style: {
                        float: 'right'
                    },
                    movies: movies,
                    user: user,
                    onBackClick: ()=>history.goBack()
                }))));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 203
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/movies/:movieId",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_headerView.HeaderView, {
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_movieView.MovieView, {
                    movieData: movies.find((movie)=>movie._id === match.params.movieId
                    ),
                    userData: user,
                    movie: movies,
                    FavoriteMovies: FavoriteMovies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 233
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/genres/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_headerView.HeaderView, {
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_genreView.GenreView, {
                    genreData: movies.find((m)=>m.Genre[1] === match.params.name
                    ).Genre,
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 252
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/directors/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_headerView.HeaderView, {
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_directorView.DirectorView, {
                    directorData: movies.find((m)=>m.Director[1] === match.params.name
                    ).Director,
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 265
            },
            __self: this
        }))));
    }
}
// #7
let mapStateToProps = (state)=>{
    return {
        movies: state.movies,
        user: state.user
    };
};
exports.default = _reactRedux.connect(mapStateToProps, {
    setMovies: _actions.setMovies,
    setUser
})(MainView); // MainView.propTypes = {
 //   userData: PropTypes.shape({
 //     Username: PropTypes.string.isRequired,
 //     Password: PropTypes.string.isRequired,
 //     Email: PropTypes.string.isRequired,
 //     Birthday: PropTypes.date
 //   }),
 // }

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}