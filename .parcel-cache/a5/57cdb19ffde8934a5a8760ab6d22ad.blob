var helpers = require("../../../../../../../.nvm/versions/node/v14.17.1/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MainView", ()=>MainView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _reactRouterDom = require("react-router-dom");
var _loginView = require("../login-view/login-view");
var _movieCard = require("../movie-card/movie-card");
var _movieView = require("../movie-view/movie-view");
var _directorView = require("../director-view/director-view");
var _genreView = require("../genre-view/genre-view");
var _registrationView = require("../registration-view/registration-view");
var _headerView = require("../header-view/header-view");
var _profileView = require("../profile-view/profile-view");
var _reactBootstrap = require("react-bootstrap");
var _mainViewScss = require("./main-view.scss");
class MainView extends _reactDefault.default.Component {
    constructor(){
        super();
        // Initial state is set to null
        this.state = {
            movies: [],
            user: null,
            genres: [],
            directors: [],
            userPassword: null,
            userEmail: null,
            userBirthday: null,
            userFavMov: [],
            signedIn: false
        };
    }
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user'),
                userPassword: localStorage.getItem('userPassword'),
                signedIn: localStorage.getItem('signedIn')
            });
            this.getMovies(accessToken);
            this.getGenres(accessToken);
            this.getDirectors(accessToken);
        }
    }
    getMovies(token) {
        _axiosDefault.default.get('https://mycinemoviedatabase.herokuapp.com/movies', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // Assign the result to the state
            this.setState({
                movies: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getGenres(token) {
        _axiosDefault.default.get('https://mycinemoviedatabase.herokuapp.com/genres', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            this.setState({
                genres: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    getDirectors(token) {
        _axiosDefault.default.get('https://mycinemoviedatabase.herokuapp.com/directors', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            this.setState({
                directors: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    /* When a user successfully logs in, this function updates the `user` property in state to that *particular user*/ onLoggedIn(authData) {
        this.setState({
            user: authData.user.Username,
            signedIn: true
        });
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        localStorage.setItem('signedIn', true);
        this.getMovies(authData.token);
        this.getGenres(authData.token);
        this.getDirectors(authData.token);
    }
    onLoggedOut() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        this.setState({
            user: null,
            signedIn: false
        });
    }
    render() {
        const { user , userFavMov =userFavMov , movies , signedIn ,  } = this.state;
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 132
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, {
            className: "main-view justify-content-md-center",
            style: {
                marginTop: '150px',
                padding: '15px'
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 133
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            exact: true,
            path: "/",
            render: ()=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return movies.map((movie)=>/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                        sm: 7,
                        md: 6,
                        lg: 3,
                        xl: 2,
                        key: movie._id
                    }, /*#__PURE__*/ _reactDefault.default.createElement(_headerView.HeaderView, {
                        signedIn: signedIn,
                        user: user
                    }), /*#__PURE__*/ _reactDefault.default.createElement(_movieCard.MovieCard, {
                        movieData: movie
                    }))
                );
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 137
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/register",
            render: ()=>{
                if (user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Redirect, {
                    to: "/"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_registrationView.RegistrationView, {
                    user: user
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 150
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/profile",
            render: (history)=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 7
                }, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, null, /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Button, {
                    variant: "info",
                    style: {
                        color: 'white'
                    },
                    className: "profile-title",
                    disabled: true
                }, "User Profile")), /*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Row, null, /*#__PURE__*/ _reactDefault.default.createElement(_profileView.ProfileView, {
                    style: {
                        float: 'right'
                    },
                    movies: movies,
                    user: user,
                    onBackClick: ()=>history.goBack()
                }))));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 157
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/movies/:movieId",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_movieView.MovieView, {
                    movieData: movies.find((movie)=>movie._id === match.params.movieId
                    ),
                    userData: user,
                    movie: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 185
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/genres/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_genreView.GenreView, {
                    genreData: movies.find((m)=>m.Genre[1] === match.params.name
                    ).Genre,
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 201
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/directors/:name",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_reactBootstrap.Col, {
                    md: 6
                }, /*#__PURE__*/ _reactDefault.default.createElement(_directorView.DirectorView, {
                    directorData: movies.find((m)=>m.Director[1] === match.params.name
                    ).Director,
                    movies: movies,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/marcuskrause/Documents/WebDev/GitHub/myCinemovieApp-client/src/components/main-view/main-view.jsx",
                lineNumber: 212
            },
            __self: this
        }))));
    }
}
MainView.propTypes = {
    userData: _propTypesDefault.default.shape({
        Username: _propTypesDefault.default.string.isRequired,
        Password: _propTypesDefault.default.string.isRequired,
        Email: _propTypesDefault.default.string.isRequired,
        Birthday: _propTypesDefault.default.date
    })
};

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}