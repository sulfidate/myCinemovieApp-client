"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var React = _interopRequireWildcard(require("react"));
var _useEventCallback = _interopRequireDefault(require("@restart/hooks/useEventCallback"));
var _warning = _interopRequireDefault(require("warning"));
var _NavContext = _interopRequireDefault(require("./NavContext"));
var _SelectableContext = _interopRequireWildcard(require("./SelectableContext"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
const defaultProps = {
    disabled: false
};
const AbstractNavItem = /*#__PURE__*/ React.forwardRef(({ active , className , eventKey , onSelect , onClick , as: Component , ...props }, ref)=>{
    const navKey = _SelectableContext.makeEventKey(eventKey, props.href);
    const parentOnSelect = React.useContext(_SelectableContext.default);
    const navContext = React.useContext(_NavContext.default);
    let isActive = active;
    if (navContext) {
        if (!props.role && navContext.role === 'tablist') props.role = 'tab';
        const contextControllerId = navContext.getControllerId(navKey);
        const contextControlledId = navContext.getControlledId(navKey);
        _warning.default(!contextControllerId || !props.id, `[react-bootstrap] The provided id '${props.id}' was overwritten by the current navContext with '${contextControllerId}'.`);
        _warning.default(!contextControlledId || !props['aria-controls'], `[react-bootstrap] The provided aria-controls value '${props['aria-controls']}' was overwritten by the current navContext with '${contextControlledId}'.`);
        props['data-rb-event-key'] = navKey;
        props.id = contextControllerId || props.id;
        props['aria-controls'] = contextControlledId || props['aria-controls'];
        isActive = active == null && navKey != null ? navContext.activeKey === navKey : active;
    }
    if (props.role === 'tab') {
        if (props.disabled) {
            props.tabIndex = -1;
            props['aria-disabled'] = true;
        }
        props['aria-selected'] = isActive;
    }
    const handleOnclick = _useEventCallback.default((e)=>{
        onClick == null || onClick(e);
        if (navKey == null) return;
        onSelect == null || onSelect(navKey, e);
        parentOnSelect == null || parentOnSelect(navKey, e);
    });
    return(/*#__PURE__*/ _jsxRuntime.jsx(Component, {
        ...props,
        ref: ref,
        onClick: handleOnclick,
        className: _classnames.default(className, isActive && 'active')
    }));
});
AbstractNavItem.defaultProps = defaultProps;
var _default = AbstractNavItem;
exports.default = _default;
module.exports = exports.default;
