"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _addEventListener = _interopRequireDefault(require("dom-helpers/addEventListener"));
var _canUseDOM = _interopRequireDefault(require("dom-helpers/canUseDOM"));
var _ownerDocument = _interopRequireDefault(require("dom-helpers/ownerDocument"));
var _removeEventListener = _interopRequireDefault(require("dom-helpers/removeEventListener"));
var _scrollbarSize = _interopRequireDefault(require("dom-helpers/scrollbarSize"));
var _useCallbackRef = _interopRequireDefault(require("@restart/hooks/useCallbackRef"));
var _useEventCallback = _interopRequireDefault(require("@restart/hooks/useEventCallback"));
var _useMergedRefs = _interopRequireDefault(require("@restart/hooks/useMergedRefs"));
var _useWillUnmount = _interopRequireDefault(require("@restart/hooks/useWillUnmount"));
var _transitionEnd = _interopRequireDefault(require("dom-helpers/transitionEnd"));
var React = _interopRequireWildcard(require("react"));
var _Modal = _interopRequireDefault(require("react-overlays/Modal"));
var _BootstrapModalManager = require("./BootstrapModalManager");
var _Fade = _interopRequireDefault(require("./Fade"));
var _ModalBody = _interopRequireDefault(require("./ModalBody"));
var _ModalContext = _interopRequireDefault(require("./ModalContext"));
var _ModalDialog = _interopRequireDefault(require("./ModalDialog"));
var _ModalFooter = _interopRequireDefault(require("./ModalFooter"));
var _ModalHeader = _interopRequireDefault(require("./ModalHeader"));
var _ModalTitle = _interopRequireDefault(require("./ModalTitle"));
var _ThemeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop1) {
        return nodeInterop1 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
const defaultProps = {
    show: false,
    backdrop: true,
    keyboard: true,
    autoFocus: true,
    enforceFocus: true,
    restoreFocus: true,
    animation: true,
    dialogAs: _ModalDialog.default
};
/* eslint-disable no-use-before-define, react/no-multi-comp */ function DialogTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_Fade.default, {
        ...props,
        timeout: null
    }));
}
function BackdropTransition(props) {
    return(/*#__PURE__*/ _jsxRuntime.jsx(_Fade.default, {
        ...props,
        timeout: null
    }));
}
/* eslint-enable no-use-before-define */ const Modal = /*#__PURE__*/ React.forwardRef(({ bsPrefix , className , style , dialogClassName , contentClassName , children , dialogAs: Dialog , 'aria-labelledby': ariaLabelledby , /* BaseModal props */ show , animation , backdrop , keyboard , onEscapeKeyDown , onShow , onHide , container , autoFocus , enforceFocus , restoreFocus , restoreFocusOptions , onEntered , onExit , onExiting , onEnter , onEntering , onExited , backdropClassName , manager: propsManager , ...props }, ref)=>{
    const [modalStyle, setStyle] = React.useState({
    });
    const [animateStaticModal, setAnimateStaticModal] = React.useState(false);
    const waitingForMouseUpRef = React.useRef(false);
    const ignoreBackdropClickRef = React.useRef(false);
    const removeStaticModalAnimationRef = React.useRef(null);
    const [modal, setModalRef] = _useCallbackRef.default();
    const mergedRef = _useMergedRefs.default(ref, setModalRef);
    const handleHide = _useEventCallback.default(onHide);
    bsPrefix = _ThemeProvider.useBootstrapPrefix(bsPrefix, 'modal');
    const modalContext = React.useMemo(()=>({
            onHide: handleHide
        })
    , [
        handleHide
    ]);
    function getModalManager() {
        if (propsManager) return propsManager;
        return _BootstrapModalManager.getSharedManager();
    }
    function updateDialogStyle(node) {
        if (!_canUseDOM.default) return;
        const containerIsOverflowing = getModalManager().isContainerOverflowing(modal);
        const modalIsOverflowing = node.scrollHeight > _ownerDocument.default(node).documentElement.clientHeight;
        setStyle({
            paddingRight: containerIsOverflowing && !modalIsOverflowing ? _scrollbarSize.default() : undefined,
            paddingLeft: !containerIsOverflowing && modalIsOverflowing ? _scrollbarSize.default() : undefined
        });
    }
    const handleWindowResize = _useEventCallback.default(()=>{
        if (modal) updateDialogStyle(modal.dialog);
    });
    _useWillUnmount.default(()=>{
        _removeEventListener.default(window, 'resize', handleWindowResize);
        removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
    }); // We prevent the modal from closing during a drag by detecting where the
    // the click originates from. If it starts in the modal and then ends outside
    // don't close.
    const handleDialogMouseDown = ()=>{
        waitingForMouseUpRef.current = true;
    };
    const handleMouseUp = (e)=>{
        if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) ignoreBackdropClickRef.current = true;
        waitingForMouseUpRef.current = false;
    };
    const handleStaticModalAnimation = ()=>{
        setAnimateStaticModal(true);
        removeStaticModalAnimationRef.current = _transitionEnd.default(modal.dialog, ()=>{
            setAnimateStaticModal(false);
        });
    };
    const handleStaticBackdropClick = (e)=>{
        if (e.target !== e.currentTarget) return;
        handleStaticModalAnimation();
    };
    const handleClick = (e)=>{
        if (backdrop === 'static') {
            handleStaticBackdropClick(e);
            return;
        }
        if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
            ignoreBackdropClickRef.current = false;
            return;
        }
        onHide == null || onHide();
    };
    const handleEscapeKeyDown = (e)=>{
        if (!keyboard && backdrop === 'static') {
            // Call preventDefault to stop modal from closing in react-overlays,
            // then play our animation.
            e.preventDefault();
            handleStaticModalAnimation();
        } else if (keyboard && onEscapeKeyDown) onEscapeKeyDown(e);
    };
    const handleEnter = (node, isAppearing)=>{
        if (node) {
            node.style.display = 'block';
            updateDialogStyle(node);
        }
        onEnter == null || onEnter(node, isAppearing);
    };
    const handleExit = (node)=>{
        removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();
        onExit == null || onExit(node);
    };
    const handleEntering = (node, isAppearing)=>{
        onEntering == null || onEntering(node, isAppearing); // FIXME: This should work even when animation is disabled.
        _addEventListener.default(window, 'resize', handleWindowResize);
    };
    const handleExited = (node)=>{
        if (node) node.style.display = ''; // RHL removes it sometimes
        onExited == null || onExited(node); // FIXME: This should work even when animation is disabled.
        _removeEventListener.default(window, 'resize', handleWindowResize);
    };
    const renderBackdrop = React.useCallback((backdropProps)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            ...backdropProps,
            className: _classnames.default(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')
        })
    , [
        animation,
        backdropClassName,
        bsPrefix
    ]);
    const baseModalStyle = {
        ...style,
        ...modalStyle
    }; // Sets `display` always block when `animation` is false
    if (!animation) baseModalStyle.display = 'block';
    const renderDialog = (dialogProps)=>/*#__PURE__*/ _jsxRuntime.jsx("div", {
            role: "dialog",
            ...dialogProps,
            style: baseModalStyle,
            className: _classnames.default(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`),
            onClick: backdrop ? handleClick : undefined,
            onMouseUp: handleMouseUp,
            "aria-labelledby": ariaLabelledby,
            children: /*#__PURE__*/ _jsxRuntime.jsx(Dialog, {
                ...props,
                onMouseDown: handleDialogMouseDown,
                className: dialogClassName,
                contentClassName: contentClassName,
                children: children
            })
        })
    ;
    return(/*#__PURE__*/ _jsxRuntime.jsx(_ModalContext.default.Provider, {
        value: modalContext,
        children: /*#__PURE__*/ _jsxRuntime.jsx(_Modal.default, {
            show: show,
            ref: mergedRef,
            backdrop: backdrop,
            container: container,
            keyboard: true,
            autoFocus: autoFocus,
            enforceFocus: enforceFocus,
            restoreFocus: restoreFocus,
            restoreFocusOptions: restoreFocusOptions,
            onEscapeKeyDown: handleEscapeKeyDown,
            onShow: onShow,
            onHide: onHide,
            onEnter: handleEnter,
            onEntering: handleEntering,
            onEntered: onEntered,
            onExit: handleExit,
            onExiting: onExiting,
            onExited: handleExited,
            manager: getModalManager(),
            containerClassName: `${bsPrefix}-open`,
            transition: animation ? DialogTransition : undefined,
            backdropTransition: animation ? BackdropTransition : undefined,
            renderBackdrop: renderBackdrop,
            renderDialog: renderDialog
        })
    }));
});
Modal.displayName = 'Modal';
Modal.defaultProps = defaultProps;
var _default = Object.assign(Modal, {
    Body: _ModalBody.default,
    Header: _ModalHeader.default,
    Title: _ModalTitle.default,
    Footer: _ModalFooter.default,
    Dialog: _ModalDialog.default,
    TRANSITION_DURATION: 300,
    BACKDROP_TRANSITION_DURATION: 150
});
exports.default = _default;
module.exports = exports.default;
